# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Build(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'buildUnderscoreoptions': 'BuildOptions',
        'numUnderscoreignored': 'Integer',
        'numUnderscoremissing': 'Integer',
        'numUnderscoreownedUnderscorelessUnderscoreignored': 'Integer',
        'pctUnderscoreowned': 'Float',
        'totalUnderscoreparts': 'Integer',
        'totalUnderscorepartsUnderscorelessUnderscoreignored': 'Integer'
    }

    attribute_map = {
        'buildUnderscoreoptions': 'build_options',
        'numUnderscoreignored': 'num_ignored',
        'numUnderscoremissing': 'num_missing',
        'numUnderscoreownedUnderscorelessUnderscoreignored': 'num_owned_less_ignored',
        'pctUnderscoreowned': 'pct_owned',
        'totalUnderscoreparts': 'total_parts',
        'totalUnderscorepartsUnderscorelessUnderscoreignored': 'total_parts_less_ignored'
    }

    def __init__(self, buildUnderscoreoptions=null, numUnderscoreignored=null, numUnderscoremissing=null, numUnderscoreownedUnderscorelessUnderscoreignored=null, pctUnderscoreowned=null, totalUnderscoreparts=null, totalUnderscorepartsUnderscorelessUnderscoreignored=null):  # noqa: E501
        """Build - a model defined in OpenAPI"""  # noqa: E501

        self._buildUnderscoreoptions = None
        self._numUnderscoreignored = None
        self._numUnderscoremissing = None
        self._numUnderscoreownedUnderscorelessUnderscoreignored = None
        self._pctUnderscoreowned = None
        self._totalUnderscoreparts = None
        self._totalUnderscorepartsUnderscorelessUnderscoreignored = None
        self.discriminator = None

        if buildUnderscoreoptions is not None:
            self.buildUnderscoreoptions = buildUnderscoreoptions
        if numUnderscoreignored is not None:
            self.numUnderscoreignored = numUnderscoreignored
        if numUnderscoremissing is not None:
            self.numUnderscoremissing = numUnderscoremissing
        if numUnderscoreownedUnderscorelessUnderscoreignored is not None:
            self.numUnderscoreownedUnderscorelessUnderscoreignored = numUnderscoreownedUnderscorelessUnderscoreignored
        if pctUnderscoreowned is not None:
            self.pctUnderscoreowned = pctUnderscoreowned
        if totalUnderscoreparts is not None:
            self.totalUnderscoreparts = totalUnderscoreparts
        if totalUnderscorepartsUnderscorelessUnderscoreignored is not None:
            self.totalUnderscorepartsUnderscorelessUnderscoreignored = totalUnderscorepartsUnderscorelessUnderscoreignored

    @property
    def buildUnderscoreoptions(self):
        """Gets the buildUnderscoreoptions of this Build.  # noqa: E501


        :return: The buildUnderscoreoptions of this Build.  # noqa: E501
        :rtype: BuildOptions
        """
        return self._buildUnderscoreoptions

    @buildUnderscoreoptions.setter
    def buildUnderscoreoptions(self, buildUnderscoreoptions):
        """Sets the buildUnderscoreoptions of this Build.


        :param buildUnderscoreoptions: The buildUnderscoreoptions of this Build.  # noqa: E501
        :type: BuildOptions
        """

        self._buildUnderscoreoptions = buildUnderscoreoptions

    @property
    def numUnderscoreignored(self):
        """Gets the numUnderscoreignored of this Build.  # noqa: E501


        :return: The numUnderscoreignored of this Build.  # noqa: E501
        :rtype: Integer
        """
        return self._numUnderscoreignored

    @numUnderscoreignored.setter
    def numUnderscoreignored(self, numUnderscoreignored):
        """Sets the numUnderscoreignored of this Build.


        :param numUnderscoreignored: The numUnderscoreignored of this Build.  # noqa: E501
        :type: Integer
        """

        self._numUnderscoreignored = numUnderscoreignored

    @property
    def numUnderscoremissing(self):
        """Gets the numUnderscoremissing of this Build.  # noqa: E501


        :return: The numUnderscoremissing of this Build.  # noqa: E501
        :rtype: Integer
        """
        return self._numUnderscoremissing

    @numUnderscoremissing.setter
    def numUnderscoremissing(self, numUnderscoremissing):
        """Sets the numUnderscoremissing of this Build.


        :param numUnderscoremissing: The numUnderscoremissing of this Build.  # noqa: E501
        :type: Integer
        """

        self._numUnderscoremissing = numUnderscoremissing

    @property
    def numUnderscoreownedUnderscorelessUnderscoreignored(self):
        """Gets the numUnderscoreownedUnderscorelessUnderscoreignored of this Build.  # noqa: E501


        :return: The numUnderscoreownedUnderscorelessUnderscoreignored of this Build.  # noqa: E501
        :rtype: Integer
        """
        return self._numUnderscoreownedUnderscorelessUnderscoreignored

    @numUnderscoreownedUnderscorelessUnderscoreignored.setter
    def numUnderscoreownedUnderscorelessUnderscoreignored(self, numUnderscoreownedUnderscorelessUnderscoreignored):
        """Sets the numUnderscoreownedUnderscorelessUnderscoreignored of this Build.


        :param numUnderscoreownedUnderscorelessUnderscoreignored: The numUnderscoreownedUnderscorelessUnderscoreignored of this Build.  # noqa: E501
        :type: Integer
        """

        self._numUnderscoreownedUnderscorelessUnderscoreignored = numUnderscoreownedUnderscorelessUnderscoreignored

    @property
    def pctUnderscoreowned(self):
        """Gets the pctUnderscoreowned of this Build.  # noqa: E501


        :return: The pctUnderscoreowned of this Build.  # noqa: E501
        :rtype: Float
        """
        return self._pctUnderscoreowned

    @pctUnderscoreowned.setter
    def pctUnderscoreowned(self, pctUnderscoreowned):
        """Sets the pctUnderscoreowned of this Build.


        :param pctUnderscoreowned: The pctUnderscoreowned of this Build.  # noqa: E501
        :type: Float
        """

        self._pctUnderscoreowned = pctUnderscoreowned

    @property
    def totalUnderscoreparts(self):
        """Gets the totalUnderscoreparts of this Build.  # noqa: E501


        :return: The totalUnderscoreparts of this Build.  # noqa: E501
        :rtype: Integer
        """
        return self._totalUnderscoreparts

    @totalUnderscoreparts.setter
    def totalUnderscoreparts(self, totalUnderscoreparts):
        """Sets the totalUnderscoreparts of this Build.


        :param totalUnderscoreparts: The totalUnderscoreparts of this Build.  # noqa: E501
        :type: Integer
        """

        self._totalUnderscoreparts = totalUnderscoreparts

    @property
    def totalUnderscorepartsUnderscorelessUnderscoreignored(self):
        """Gets the totalUnderscorepartsUnderscorelessUnderscoreignored of this Build.  # noqa: E501


        :return: The totalUnderscorepartsUnderscorelessUnderscoreignored of this Build.  # noqa: E501
        :rtype: Integer
        """
        return self._totalUnderscorepartsUnderscorelessUnderscoreignored

    @totalUnderscorepartsUnderscorelessUnderscoreignored.setter
    def totalUnderscorepartsUnderscorelessUnderscoreignored(self, totalUnderscorepartsUnderscorelessUnderscoreignored):
        """Sets the totalUnderscorepartsUnderscorelessUnderscoreignored of this Build.


        :param totalUnderscorepartsUnderscorelessUnderscoreignored: The totalUnderscorepartsUnderscorelessUnderscoreignored of this Build.  # noqa: E501
        :type: Integer
        """

        self._totalUnderscorepartsUnderscorelessUnderscoreignored = totalUnderscorepartsUnderscorelessUnderscoreignored

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Build):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
