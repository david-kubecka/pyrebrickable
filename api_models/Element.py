# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Element(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'Color',
        'designUnderscoreid': 'String',
        'elementUnderscoreid': 'String',
        'elementUnderscoreimgUnderscoreurl': 'String',
        'part': 'Part',
        'partUnderscoreimgUnderscoreurl': 'String'
    }

    attribute_map = {
        'color': 'color',
        'designUnderscoreid': 'design_id',
        'elementUnderscoreid': 'element_id',
        'elementUnderscoreimgUnderscoreurl': 'element_img_url',
        'part': 'part',
        'partUnderscoreimgUnderscoreurl': 'part_img_url'
    }

    def __init__(self, color=null, designUnderscoreid=null, elementUnderscoreid=null, elementUnderscoreimgUnderscoreurl=null, part=null, partUnderscoreimgUnderscoreurl=null):  # noqa: E501
        """Element - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._designUnderscoreid = None
        self._elementUnderscoreid = None
        self._elementUnderscoreimgUnderscoreurl = None
        self._part = None
        self._partUnderscoreimgUnderscoreurl = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if designUnderscoreid is not None:
            self.designUnderscoreid = designUnderscoreid
        if elementUnderscoreid is not None:
            self.elementUnderscoreid = elementUnderscoreid
        if elementUnderscoreimgUnderscoreurl is not None:
            self.elementUnderscoreimgUnderscoreurl = elementUnderscoreimgUnderscoreurl
        if part is not None:
            self.part = part
        if partUnderscoreimgUnderscoreurl is not None:
            self.partUnderscoreimgUnderscoreurl = partUnderscoreimgUnderscoreurl

    @property
    def color(self):
        """Gets the color of this Element.  # noqa: E501


        :return: The color of this Element.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Element.


        :param color: The color of this Element.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def designUnderscoreid(self):
        """Gets the designUnderscoreid of this Element.  # noqa: E501


        :return: The designUnderscoreid of this Element.  # noqa: E501
        :rtype: String
        """
        return self._designUnderscoreid

    @designUnderscoreid.setter
    def designUnderscoreid(self, designUnderscoreid):
        """Sets the designUnderscoreid of this Element.


        :param designUnderscoreid: The designUnderscoreid of this Element.  # noqa: E501
        :type: String
        """

        self._designUnderscoreid = designUnderscoreid

    @property
    def elementUnderscoreid(self):
        """Gets the elementUnderscoreid of this Element.  # noqa: E501


        :return: The elementUnderscoreid of this Element.  # noqa: E501
        :rtype: String
        """
        return self._elementUnderscoreid

    @elementUnderscoreid.setter
    def elementUnderscoreid(self, elementUnderscoreid):
        """Sets the elementUnderscoreid of this Element.


        :param elementUnderscoreid: The elementUnderscoreid of this Element.  # noqa: E501
        :type: String
        """

        self._elementUnderscoreid = elementUnderscoreid

    @property
    def elementUnderscoreimgUnderscoreurl(self):
        """Gets the elementUnderscoreimgUnderscoreurl of this Element.  # noqa: E501


        :return: The elementUnderscoreimgUnderscoreurl of this Element.  # noqa: E501
        :rtype: String
        """
        return self._elementUnderscoreimgUnderscoreurl

    @elementUnderscoreimgUnderscoreurl.setter
    def elementUnderscoreimgUnderscoreurl(self, elementUnderscoreimgUnderscoreurl):
        """Sets the elementUnderscoreimgUnderscoreurl of this Element.


        :param elementUnderscoreimgUnderscoreurl: The elementUnderscoreimgUnderscoreurl of this Element.  # noqa: E501
        :type: String
        """

        self._elementUnderscoreimgUnderscoreurl = elementUnderscoreimgUnderscoreurl

    @property
    def part(self):
        """Gets the part of this Element.  # noqa: E501


        :return: The part of this Element.  # noqa: E501
        :rtype: Part
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this Element.


        :param part: The part of this Element.  # noqa: E501
        :type: Part
        """

        self._part = part

    @property
    def partUnderscoreimgUnderscoreurl(self):
        """Gets the partUnderscoreimgUnderscoreurl of this Element.  # noqa: E501


        :return: The partUnderscoreimgUnderscoreurl of this Element.  # noqa: E501
        :rtype: String
        """
        return self._partUnderscoreimgUnderscoreurl

    @partUnderscoreimgUnderscoreurl.setter
    def partUnderscoreimgUnderscoreurl(self, partUnderscoreimgUnderscoreurl):
        """Sets the partUnderscoreimgUnderscoreurl of this Element.


        :param partUnderscoreimgUnderscoreurl: The partUnderscoreimgUnderscoreurl of this Element.  # noqa: E501
        :type: String
        """

        self._partUnderscoreimgUnderscoreurl = partUnderscoreimgUnderscoreurl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Element):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
