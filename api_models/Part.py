# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Part(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alternates': 'List',
        'externalUnderscoreids': 'ExternalIds',
        'molds': 'List',
        'name': 'String',
        'partUnderscorecatUnderscoreid': 'Integer',
        'partUnderscoreimgUnderscoreurl': 'String',
        'partUnderscorenum': 'String',
        'partUnderscoreurl': 'String',
        'prints': 'List',
        'yearUnderscorefrom': 'Integer',
        'yearUnderscoreto': 'Integer'
    }

    attribute_map = {
        'alternates': 'alternates',
        'externalUnderscoreids': 'external_ids',
        'molds': 'molds',
        'name': 'name',
        'partUnderscorecatUnderscoreid': 'part_cat_id',
        'partUnderscoreimgUnderscoreurl': 'part_img_url',
        'partUnderscorenum': 'part_num',
        'partUnderscoreurl': 'part_url',
        'prints': 'prints',
        'yearUnderscorefrom': 'year_from',
        'yearUnderscoreto': 'year_to'
    }

    def __init__(self, alternates=null, externalUnderscoreids=null, molds=null, name=null, partUnderscorecatUnderscoreid=null, partUnderscoreimgUnderscoreurl=null, partUnderscorenum=null, partUnderscoreurl=null, prints=null, yearUnderscorefrom=null, yearUnderscoreto=null):  # noqa: E501
        """Part - a model defined in OpenAPI"""  # noqa: E501

        self._alternates = None
        self._externalUnderscoreids = None
        self._molds = None
        self._name = None
        self._partUnderscorecatUnderscoreid = None
        self._partUnderscoreimgUnderscoreurl = None
        self._partUnderscorenum = None
        self._partUnderscoreurl = None
        self._prints = None
        self._yearUnderscorefrom = None
        self._yearUnderscoreto = None
        self.discriminator = None

        if alternates is not None:
            self.alternates = alternates
        if externalUnderscoreids is not None:
            self.externalUnderscoreids = externalUnderscoreids
        if molds is not None:
            self.molds = molds
        if name is not None:
            self.name = name
        if partUnderscorecatUnderscoreid is not None:
            self.partUnderscorecatUnderscoreid = partUnderscorecatUnderscoreid
        if partUnderscoreimgUnderscoreurl is not None:
            self.partUnderscoreimgUnderscoreurl = partUnderscoreimgUnderscoreurl
        if partUnderscorenum is not None:
            self.partUnderscorenum = partUnderscorenum
        if partUnderscoreurl is not None:
            self.partUnderscoreurl = partUnderscoreurl
        if prints is not None:
            self.prints = prints
        if yearUnderscorefrom is not None:
            self.yearUnderscorefrom = yearUnderscorefrom
        if yearUnderscoreto is not None:
            self.yearUnderscoreto = yearUnderscoreto

    @property
    def alternates(self):
        """Gets the alternates of this Part.  # noqa: E501


        :return: The alternates of this Part.  # noqa: E501
        :rtype: List
        """
        return self._alternates

    @alternates.setter
    def alternates(self, alternates):
        """Sets the alternates of this Part.


        :param alternates: The alternates of this Part.  # noqa: E501
        :type: List
        """

        self._alternates = alternates

    @property
    def externalUnderscoreids(self):
        """Gets the externalUnderscoreids of this Part.  # noqa: E501


        :return: The externalUnderscoreids of this Part.  # noqa: E501
        :rtype: ExternalIds
        """
        return self._externalUnderscoreids

    @externalUnderscoreids.setter
    def externalUnderscoreids(self, externalUnderscoreids):
        """Sets the externalUnderscoreids of this Part.


        :param externalUnderscoreids: The externalUnderscoreids of this Part.  # noqa: E501
        :type: ExternalIds
        """

        self._externalUnderscoreids = externalUnderscoreids

    @property
    def molds(self):
        """Gets the molds of this Part.  # noqa: E501


        :return: The molds of this Part.  # noqa: E501
        :rtype: List
        """
        return self._molds

    @molds.setter
    def molds(self, molds):
        """Sets the molds of this Part.


        :param molds: The molds of this Part.  # noqa: E501
        :type: List
        """

        self._molds = molds

    @property
    def name(self):
        """Gets the name of this Part.  # noqa: E501


        :return: The name of this Part.  # noqa: E501
        :rtype: String
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Part.


        :param name: The name of this Part.  # noqa: E501
        :type: String
        """

        self._name = name

    @property
    def partUnderscorecatUnderscoreid(self):
        """Gets the partUnderscorecatUnderscoreid of this Part.  # noqa: E501


        :return: The partUnderscorecatUnderscoreid of this Part.  # noqa: E501
        :rtype: Integer
        """
        return self._partUnderscorecatUnderscoreid

    @partUnderscorecatUnderscoreid.setter
    def partUnderscorecatUnderscoreid(self, partUnderscorecatUnderscoreid):
        """Sets the partUnderscorecatUnderscoreid of this Part.


        :param partUnderscorecatUnderscoreid: The partUnderscorecatUnderscoreid of this Part.  # noqa: E501
        :type: Integer
        """

        self._partUnderscorecatUnderscoreid = partUnderscorecatUnderscoreid

    @property
    def partUnderscoreimgUnderscoreurl(self):
        """Gets the partUnderscoreimgUnderscoreurl of this Part.  # noqa: E501


        :return: The partUnderscoreimgUnderscoreurl of this Part.  # noqa: E501
        :rtype: String
        """
        return self._partUnderscoreimgUnderscoreurl

    @partUnderscoreimgUnderscoreurl.setter
    def partUnderscoreimgUnderscoreurl(self, partUnderscoreimgUnderscoreurl):
        """Sets the partUnderscoreimgUnderscoreurl of this Part.


        :param partUnderscoreimgUnderscoreurl: The partUnderscoreimgUnderscoreurl of this Part.  # noqa: E501
        :type: String
        """

        self._partUnderscoreimgUnderscoreurl = partUnderscoreimgUnderscoreurl

    @property
    def partUnderscorenum(self):
        """Gets the partUnderscorenum of this Part.  # noqa: E501


        :return: The partUnderscorenum of this Part.  # noqa: E501
        :rtype: String
        """
        return self._partUnderscorenum

    @partUnderscorenum.setter
    def partUnderscorenum(self, partUnderscorenum):
        """Sets the partUnderscorenum of this Part.


        :param partUnderscorenum: The partUnderscorenum of this Part.  # noqa: E501
        :type: String
        """

        self._partUnderscorenum = partUnderscorenum

    @property
    def partUnderscoreurl(self):
        """Gets the partUnderscoreurl of this Part.  # noqa: E501


        :return: The partUnderscoreurl of this Part.  # noqa: E501
        :rtype: String
        """
        return self._partUnderscoreurl

    @partUnderscoreurl.setter
    def partUnderscoreurl(self, partUnderscoreurl):
        """Sets the partUnderscoreurl of this Part.


        :param partUnderscoreurl: The partUnderscoreurl of this Part.  # noqa: E501
        :type: String
        """

        self._partUnderscoreurl = partUnderscoreurl

    @property
    def prints(self):
        """Gets the prints of this Part.  # noqa: E501


        :return: The prints of this Part.  # noqa: E501
        :rtype: List
        """
        return self._prints

    @prints.setter
    def prints(self, prints):
        """Sets the prints of this Part.


        :param prints: The prints of this Part.  # noqa: E501
        :type: List
        """

        self._prints = prints

    @property
    def yearUnderscorefrom(self):
        """Gets the yearUnderscorefrom of this Part.  # noqa: E501


        :return: The yearUnderscorefrom of this Part.  # noqa: E501
        :rtype: Integer
        """
        return self._yearUnderscorefrom

    @yearUnderscorefrom.setter
    def yearUnderscorefrom(self, yearUnderscorefrom):
        """Sets the yearUnderscorefrom of this Part.


        :param yearUnderscorefrom: The yearUnderscorefrom of this Part.  # noqa: E501
        :type: Integer
        """

        self._yearUnderscorefrom = yearUnderscorefrom

    @property
    def yearUnderscoreto(self):
        """Gets the yearUnderscoreto of this Part.  # noqa: E501


        :return: The yearUnderscoreto of this Part.  # noqa: E501
        :rtype: Integer
        """
        return self._yearUnderscoreto

    @yearUnderscoreto.setter
    def yearUnderscoreto(self, yearUnderscoreto):
        """Sets the yearUnderscoreto of this Part.


        :param yearUnderscoreto: The yearUnderscoreto of this Part.  # noqa: E501
        :type: Integer
        """

        self._yearUnderscoreto = yearUnderscoreto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Part):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
