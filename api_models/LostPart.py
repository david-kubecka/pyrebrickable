# coding: utf-8

import pprint
import re  # noqa: F401

import six


class LostPart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'invUnderscorepart': 'InventoryPart',
        'lostUnderscorepartUnderscoreid': 'Integer',
        'lostUnderscorequantity': 'Integer'
    }

    attribute_map = {
        'invUnderscorepart': 'inv_part',
        'lostUnderscorepartUnderscoreid': 'lost_part_id',
        'lostUnderscorequantity': 'lost_quantity'
    }

    def __init__(self, invUnderscorepart=null, lostUnderscorepartUnderscoreid=null, lostUnderscorequantity=null):  # noqa: E501
        """LostPart - a model defined in OpenAPI"""  # noqa: E501

        self._invUnderscorepart = None
        self._lostUnderscorepartUnderscoreid = None
        self._lostUnderscorequantity = None
        self.discriminator = None

        if invUnderscorepart is not None:
            self.invUnderscorepart = invUnderscorepart
        if lostUnderscorepartUnderscoreid is not None:
            self.lostUnderscorepartUnderscoreid = lostUnderscorepartUnderscoreid
        if lostUnderscorequantity is not None:
            self.lostUnderscorequantity = lostUnderscorequantity

    @property
    def invUnderscorepart(self):
        """Gets the invUnderscorepart of this LostPart.  # noqa: E501


        :return: The invUnderscorepart of this LostPart.  # noqa: E501
        :rtype: InventoryPart
        """
        return self._invUnderscorepart

    @invUnderscorepart.setter
    def invUnderscorepart(self, invUnderscorepart):
        """Sets the invUnderscorepart of this LostPart.


        :param invUnderscorepart: The invUnderscorepart of this LostPart.  # noqa: E501
        :type: InventoryPart
        """

        self._invUnderscorepart = invUnderscorepart

    @property
    def lostUnderscorepartUnderscoreid(self):
        """Gets the lostUnderscorepartUnderscoreid of this LostPart.  # noqa: E501


        :return: The lostUnderscorepartUnderscoreid of this LostPart.  # noqa: E501
        :rtype: Integer
        """
        return self._lostUnderscorepartUnderscoreid

    @lostUnderscorepartUnderscoreid.setter
    def lostUnderscorepartUnderscoreid(self, lostUnderscorepartUnderscoreid):
        """Sets the lostUnderscorepartUnderscoreid of this LostPart.


        :param lostUnderscorepartUnderscoreid: The lostUnderscorepartUnderscoreid of this LostPart.  # noqa: E501
        :type: Integer
        """

        self._lostUnderscorepartUnderscoreid = lostUnderscorepartUnderscoreid

    @property
    def lostUnderscorequantity(self):
        """Gets the lostUnderscorequantity of this LostPart.  # noqa: E501


        :return: The lostUnderscorequantity of this LostPart.  # noqa: E501
        :rtype: Integer
        """
        return self._lostUnderscorequantity

    @lostUnderscorequantity.setter
    def lostUnderscorequantity(self, lostUnderscorequantity):
        """Sets the lostUnderscorequantity of this LostPart.


        :param lostUnderscorequantity: The lostUnderscorequantity of this LostPart.  # noqa: E501
        :type: Integer
        """

        self._lostUnderscorequantity = lostUnderscorequantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LostPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
