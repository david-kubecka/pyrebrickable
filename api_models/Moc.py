# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Moc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'designerUnderscorename': 'String',
        'designerUnderscoreurl': 'String',
        'mocUnderscoreimgUnderscoreurl': 'String',
        'mocUnderscoreurl': 'String',
        'name': 'String',
        'numUnderscoreparts': 'Integer',
        'setUnderscorenum': 'String',
        'themeUnderscoreid': 'Integer',
        'year': 'Integer'
    }

    attribute_map = {
        'designerUnderscorename': 'designer_name',
        'designerUnderscoreurl': 'designer_url',
        'mocUnderscoreimgUnderscoreurl': 'moc_img_url',
        'mocUnderscoreurl': 'moc_url',
        'name': 'name',
        'numUnderscoreparts': 'num_parts',
        'setUnderscorenum': 'set_num',
        'themeUnderscoreid': 'theme_id',
        'year': 'year'
    }

    def __init__(self, designerUnderscorename=null, designerUnderscoreurl=null, mocUnderscoreimgUnderscoreurl=null, mocUnderscoreurl=null, name=null, numUnderscoreparts=null, setUnderscorenum=null, themeUnderscoreid=null, year=null):  # noqa: E501
        """Moc - a model defined in OpenAPI"""  # noqa: E501

        self._designerUnderscorename = None
        self._designerUnderscoreurl = None
        self._mocUnderscoreimgUnderscoreurl = None
        self._mocUnderscoreurl = None
        self._name = None
        self._numUnderscoreparts = None
        self._setUnderscorenum = None
        self._themeUnderscoreid = None
        self._year = None
        self.discriminator = None

        if designerUnderscorename is not None:
            self.designerUnderscorename = designerUnderscorename
        if designerUnderscoreurl is not None:
            self.designerUnderscoreurl = designerUnderscoreurl
        if mocUnderscoreimgUnderscoreurl is not None:
            self.mocUnderscoreimgUnderscoreurl = mocUnderscoreimgUnderscoreurl
        if mocUnderscoreurl is not None:
            self.mocUnderscoreurl = mocUnderscoreurl
        if name is not None:
            self.name = name
        if numUnderscoreparts is not None:
            self.numUnderscoreparts = numUnderscoreparts
        if setUnderscorenum is not None:
            self.setUnderscorenum = setUnderscorenum
        if themeUnderscoreid is not None:
            self.themeUnderscoreid = themeUnderscoreid
        if year is not None:
            self.year = year

    @property
    def designerUnderscorename(self):
        """Gets the designerUnderscorename of this Moc.  # noqa: E501


        :return: The designerUnderscorename of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._designerUnderscorename

    @designerUnderscorename.setter
    def designerUnderscorename(self, designerUnderscorename):
        """Sets the designerUnderscorename of this Moc.


        :param designerUnderscorename: The designerUnderscorename of this Moc.  # noqa: E501
        :type: String
        """

        self._designerUnderscorename = designerUnderscorename

    @property
    def designerUnderscoreurl(self):
        """Gets the designerUnderscoreurl of this Moc.  # noqa: E501


        :return: The designerUnderscoreurl of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._designerUnderscoreurl

    @designerUnderscoreurl.setter
    def designerUnderscoreurl(self, designerUnderscoreurl):
        """Sets the designerUnderscoreurl of this Moc.


        :param designerUnderscoreurl: The designerUnderscoreurl of this Moc.  # noqa: E501
        :type: String
        """

        self._designerUnderscoreurl = designerUnderscoreurl

    @property
    def mocUnderscoreimgUnderscoreurl(self):
        """Gets the mocUnderscoreimgUnderscoreurl of this Moc.  # noqa: E501


        :return: The mocUnderscoreimgUnderscoreurl of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._mocUnderscoreimgUnderscoreurl

    @mocUnderscoreimgUnderscoreurl.setter
    def mocUnderscoreimgUnderscoreurl(self, mocUnderscoreimgUnderscoreurl):
        """Sets the mocUnderscoreimgUnderscoreurl of this Moc.


        :param mocUnderscoreimgUnderscoreurl: The mocUnderscoreimgUnderscoreurl of this Moc.  # noqa: E501
        :type: String
        """

        self._mocUnderscoreimgUnderscoreurl = mocUnderscoreimgUnderscoreurl

    @property
    def mocUnderscoreurl(self):
        """Gets the mocUnderscoreurl of this Moc.  # noqa: E501


        :return: The mocUnderscoreurl of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._mocUnderscoreurl

    @mocUnderscoreurl.setter
    def mocUnderscoreurl(self, mocUnderscoreurl):
        """Sets the mocUnderscoreurl of this Moc.


        :param mocUnderscoreurl: The mocUnderscoreurl of this Moc.  # noqa: E501
        :type: String
        """

        self._mocUnderscoreurl = mocUnderscoreurl

    @property
    def name(self):
        """Gets the name of this Moc.  # noqa: E501


        :return: The name of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Moc.


        :param name: The name of this Moc.  # noqa: E501
        :type: String
        """

        self._name = name

    @property
    def numUnderscoreparts(self):
        """Gets the numUnderscoreparts of this Moc.  # noqa: E501


        :return: The numUnderscoreparts of this Moc.  # noqa: E501
        :rtype: Integer
        """
        return self._numUnderscoreparts

    @numUnderscoreparts.setter
    def numUnderscoreparts(self, numUnderscoreparts):
        """Sets the numUnderscoreparts of this Moc.


        :param numUnderscoreparts: The numUnderscoreparts of this Moc.  # noqa: E501
        :type: Integer
        """

        self._numUnderscoreparts = numUnderscoreparts

    @property
    def setUnderscorenum(self):
        """Gets the setUnderscorenum of this Moc.  # noqa: E501


        :return: The setUnderscorenum of this Moc.  # noqa: E501
        :rtype: String
        """
        return self._setUnderscorenum

    @setUnderscorenum.setter
    def setUnderscorenum(self, setUnderscorenum):
        """Sets the setUnderscorenum of this Moc.


        :param setUnderscorenum: The setUnderscorenum of this Moc.  # noqa: E501
        :type: String
        """

        self._setUnderscorenum = setUnderscorenum

    @property
    def themeUnderscoreid(self):
        """Gets the themeUnderscoreid of this Moc.  # noqa: E501


        :return: The themeUnderscoreid of this Moc.  # noqa: E501
        :rtype: Integer
        """
        return self._themeUnderscoreid

    @themeUnderscoreid.setter
    def themeUnderscoreid(self, themeUnderscoreid):
        """Sets the themeUnderscoreid of this Moc.


        :param themeUnderscoreid: The themeUnderscoreid of this Moc.  # noqa: E501
        :type: Integer
        """

        self._themeUnderscoreid = themeUnderscoreid

    @property
    def year(self):
        """Gets the year of this Moc.  # noqa: E501


        :return: The year of this Moc.  # noqa: E501
        :rtype: Integer
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Moc.


        :param year: The year of this Moc.  # noqa: E501
        :type: Integer
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Moc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
