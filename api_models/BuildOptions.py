# coding: utf-8

import pprint
import re  # noqa: F401

import six


class BuildOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'Integer',
        'ignoreUnderscorealtp': 'Boolean',
        'ignoreUnderscoreminifigs': 'Boolean',
        'ignoreUnderscoremold': 'Boolean',
        'ignoreUnderscorenonUnderscorelego': 'Boolean',
        'ignoreUnderscoreprint': 'Boolean',
        'incUnderscoreaccessory': 'Boolean',
        'incUnderscorebmodels': 'Boolean',
        'incUnderscorecustom': 'Boolean',
        'incUnderscoreofficial': 'Boolean',
        'incUnderscoreowned': 'Boolean',
        'incUnderscorepremium': 'Boolean',
        'maxUnderscoreparts': 'Integer',
        'maxUnderscoreyear': 'Integer',
        'minUnderscoreparts': 'Integer',
        'minUnderscoreyear': 'Integer',
        'sortUnderscoreby': 'Integer',
        'theme': 'Integer'
    }

    attribute_map = {
        'color': 'color',
        'ignoreUnderscorealtp': 'ignore_altp',
        'ignoreUnderscoreminifigs': 'ignore_minifigs',
        'ignoreUnderscoremold': 'ignore_mold',
        'ignoreUnderscorenonUnderscorelego': 'ignore_non_lego',
        'ignoreUnderscoreprint': 'ignore_print',
        'incUnderscoreaccessory': 'inc_accessory',
        'incUnderscorebmodels': 'inc_bmodels',
        'incUnderscorecustom': 'inc_custom',
        'incUnderscoreofficial': 'inc_official',
        'incUnderscoreowned': 'inc_owned',
        'incUnderscorepremium': 'inc_premium',
        'maxUnderscoreparts': 'max_parts',
        'maxUnderscoreyear': 'max_year',
        'minUnderscoreparts': 'min_parts',
        'minUnderscoreyear': 'min_year',
        'sortUnderscoreby': 'sort_by',
        'theme': 'theme'
    }

    def __init__(self, color=null, ignoreUnderscorealtp=null, ignoreUnderscoreminifigs=null, ignoreUnderscoremold=null, ignoreUnderscorenonUnderscorelego=null, ignoreUnderscoreprint=null, incUnderscoreaccessory=null, incUnderscorebmodels=null, incUnderscorecustom=null, incUnderscoreofficial=null, incUnderscoreowned=null, incUnderscorepremium=null, maxUnderscoreparts=null, maxUnderscoreyear=null, minUnderscoreparts=null, minUnderscoreyear=null, sortUnderscoreby=null, theme=null):  # noqa: E501
        """BuildOptions - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._ignoreUnderscorealtp = None
        self._ignoreUnderscoreminifigs = None
        self._ignoreUnderscoremold = None
        self._ignoreUnderscorenonUnderscorelego = None
        self._ignoreUnderscoreprint = None
        self._incUnderscoreaccessory = None
        self._incUnderscorebmodels = None
        self._incUnderscorecustom = None
        self._incUnderscoreofficial = None
        self._incUnderscoreowned = None
        self._incUnderscorepremium = None
        self._maxUnderscoreparts = None
        self._maxUnderscoreyear = None
        self._minUnderscoreparts = None
        self._minUnderscoreyear = None
        self._sortUnderscoreby = None
        self._theme = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if ignoreUnderscorealtp is not None:
            self.ignoreUnderscorealtp = ignoreUnderscorealtp
        if ignoreUnderscoreminifigs is not None:
            self.ignoreUnderscoreminifigs = ignoreUnderscoreminifigs
        if ignoreUnderscoremold is not None:
            self.ignoreUnderscoremold = ignoreUnderscoremold
        if ignoreUnderscorenonUnderscorelego is not None:
            self.ignoreUnderscorenonUnderscorelego = ignoreUnderscorenonUnderscorelego
        if ignoreUnderscoreprint is not None:
            self.ignoreUnderscoreprint = ignoreUnderscoreprint
        if incUnderscoreaccessory is not None:
            self.incUnderscoreaccessory = incUnderscoreaccessory
        if incUnderscorebmodels is not None:
            self.incUnderscorebmodels = incUnderscorebmodels
        if incUnderscorecustom is not None:
            self.incUnderscorecustom = incUnderscorecustom
        if incUnderscoreofficial is not None:
            self.incUnderscoreofficial = incUnderscoreofficial
        if incUnderscoreowned is not None:
            self.incUnderscoreowned = incUnderscoreowned
        if incUnderscorepremium is not None:
            self.incUnderscorepremium = incUnderscorepremium
        if maxUnderscoreparts is not None:
            self.maxUnderscoreparts = maxUnderscoreparts
        if maxUnderscoreyear is not None:
            self.maxUnderscoreyear = maxUnderscoreyear
        if minUnderscoreparts is not None:
            self.minUnderscoreparts = minUnderscoreparts
        if minUnderscoreyear is not None:
            self.minUnderscoreyear = minUnderscoreyear
        if sortUnderscoreby is not None:
            self.sortUnderscoreby = sortUnderscoreby
        if theme is not None:
            self.theme = theme

    @property
    def color(self):
        """Gets the color of this BuildOptions.  # noqa: E501


        :return: The color of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this BuildOptions.


        :param color: The color of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._color = color

    @property
    def ignoreUnderscorealtp(self):
        """Gets the ignoreUnderscorealtp of this BuildOptions.  # noqa: E501


        :return: The ignoreUnderscorealtp of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._ignoreUnderscorealtp

    @ignoreUnderscorealtp.setter
    def ignoreUnderscorealtp(self, ignoreUnderscorealtp):
        """Sets the ignoreUnderscorealtp of this BuildOptions.


        :param ignoreUnderscorealtp: The ignoreUnderscorealtp of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._ignoreUnderscorealtp = ignoreUnderscorealtp

    @property
    def ignoreUnderscoreminifigs(self):
        """Gets the ignoreUnderscoreminifigs of this BuildOptions.  # noqa: E501


        :return: The ignoreUnderscoreminifigs of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._ignoreUnderscoreminifigs

    @ignoreUnderscoreminifigs.setter
    def ignoreUnderscoreminifigs(self, ignoreUnderscoreminifigs):
        """Sets the ignoreUnderscoreminifigs of this BuildOptions.


        :param ignoreUnderscoreminifigs: The ignoreUnderscoreminifigs of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._ignoreUnderscoreminifigs = ignoreUnderscoreminifigs

    @property
    def ignoreUnderscoremold(self):
        """Gets the ignoreUnderscoremold of this BuildOptions.  # noqa: E501


        :return: The ignoreUnderscoremold of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._ignoreUnderscoremold

    @ignoreUnderscoremold.setter
    def ignoreUnderscoremold(self, ignoreUnderscoremold):
        """Sets the ignoreUnderscoremold of this BuildOptions.


        :param ignoreUnderscoremold: The ignoreUnderscoremold of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._ignoreUnderscoremold = ignoreUnderscoremold

    @property
    def ignoreUnderscorenonUnderscorelego(self):
        """Gets the ignoreUnderscorenonUnderscorelego of this BuildOptions.  # noqa: E501


        :return: The ignoreUnderscorenonUnderscorelego of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._ignoreUnderscorenonUnderscorelego

    @ignoreUnderscorenonUnderscorelego.setter
    def ignoreUnderscorenonUnderscorelego(self, ignoreUnderscorenonUnderscorelego):
        """Sets the ignoreUnderscorenonUnderscorelego of this BuildOptions.


        :param ignoreUnderscorenonUnderscorelego: The ignoreUnderscorenonUnderscorelego of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._ignoreUnderscorenonUnderscorelego = ignoreUnderscorenonUnderscorelego

    @property
    def ignoreUnderscoreprint(self):
        """Gets the ignoreUnderscoreprint of this BuildOptions.  # noqa: E501


        :return: The ignoreUnderscoreprint of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._ignoreUnderscoreprint

    @ignoreUnderscoreprint.setter
    def ignoreUnderscoreprint(self, ignoreUnderscoreprint):
        """Sets the ignoreUnderscoreprint of this BuildOptions.


        :param ignoreUnderscoreprint: The ignoreUnderscoreprint of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._ignoreUnderscoreprint = ignoreUnderscoreprint

    @property
    def incUnderscoreaccessory(self):
        """Gets the incUnderscoreaccessory of this BuildOptions.  # noqa: E501


        :return: The incUnderscoreaccessory of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscoreaccessory

    @incUnderscoreaccessory.setter
    def incUnderscoreaccessory(self, incUnderscoreaccessory):
        """Sets the incUnderscoreaccessory of this BuildOptions.


        :param incUnderscoreaccessory: The incUnderscoreaccessory of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscoreaccessory = incUnderscoreaccessory

    @property
    def incUnderscorebmodels(self):
        """Gets the incUnderscorebmodels of this BuildOptions.  # noqa: E501


        :return: The incUnderscorebmodels of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscorebmodels

    @incUnderscorebmodels.setter
    def incUnderscorebmodels(self, incUnderscorebmodels):
        """Sets the incUnderscorebmodels of this BuildOptions.


        :param incUnderscorebmodels: The incUnderscorebmodels of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscorebmodels = incUnderscorebmodels

    @property
    def incUnderscorecustom(self):
        """Gets the incUnderscorecustom of this BuildOptions.  # noqa: E501


        :return: The incUnderscorecustom of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscorecustom

    @incUnderscorecustom.setter
    def incUnderscorecustom(self, incUnderscorecustom):
        """Sets the incUnderscorecustom of this BuildOptions.


        :param incUnderscorecustom: The incUnderscorecustom of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscorecustom = incUnderscorecustom

    @property
    def incUnderscoreofficial(self):
        """Gets the incUnderscoreofficial of this BuildOptions.  # noqa: E501


        :return: The incUnderscoreofficial of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscoreofficial

    @incUnderscoreofficial.setter
    def incUnderscoreofficial(self, incUnderscoreofficial):
        """Sets the incUnderscoreofficial of this BuildOptions.


        :param incUnderscoreofficial: The incUnderscoreofficial of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscoreofficial = incUnderscoreofficial

    @property
    def incUnderscoreowned(self):
        """Gets the incUnderscoreowned of this BuildOptions.  # noqa: E501


        :return: The incUnderscoreowned of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscoreowned

    @incUnderscoreowned.setter
    def incUnderscoreowned(self, incUnderscoreowned):
        """Sets the incUnderscoreowned of this BuildOptions.


        :param incUnderscoreowned: The incUnderscoreowned of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscoreowned = incUnderscoreowned

    @property
    def incUnderscorepremium(self):
        """Gets the incUnderscorepremium of this BuildOptions.  # noqa: E501


        :return: The incUnderscorepremium of this BuildOptions.  # noqa: E501
        :rtype: Boolean
        """
        return self._incUnderscorepremium

    @incUnderscorepremium.setter
    def incUnderscorepremium(self, incUnderscorepremium):
        """Sets the incUnderscorepremium of this BuildOptions.


        :param incUnderscorepremium: The incUnderscorepremium of this BuildOptions.  # noqa: E501
        :type: Boolean
        """

        self._incUnderscorepremium = incUnderscorepremium

    @property
    def maxUnderscoreparts(self):
        """Gets the maxUnderscoreparts of this BuildOptions.  # noqa: E501


        :return: The maxUnderscoreparts of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._maxUnderscoreparts

    @maxUnderscoreparts.setter
    def maxUnderscoreparts(self, maxUnderscoreparts):
        """Sets the maxUnderscoreparts of this BuildOptions.


        :param maxUnderscoreparts: The maxUnderscoreparts of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._maxUnderscoreparts = maxUnderscoreparts

    @property
    def maxUnderscoreyear(self):
        """Gets the maxUnderscoreyear of this BuildOptions.  # noqa: E501


        :return: The maxUnderscoreyear of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._maxUnderscoreyear

    @maxUnderscoreyear.setter
    def maxUnderscoreyear(self, maxUnderscoreyear):
        """Sets the maxUnderscoreyear of this BuildOptions.


        :param maxUnderscoreyear: The maxUnderscoreyear of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._maxUnderscoreyear = maxUnderscoreyear

    @property
    def minUnderscoreparts(self):
        """Gets the minUnderscoreparts of this BuildOptions.  # noqa: E501


        :return: The minUnderscoreparts of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._minUnderscoreparts

    @minUnderscoreparts.setter
    def minUnderscoreparts(self, minUnderscoreparts):
        """Sets the minUnderscoreparts of this BuildOptions.


        :param minUnderscoreparts: The minUnderscoreparts of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._minUnderscoreparts = minUnderscoreparts

    @property
    def minUnderscoreyear(self):
        """Gets the minUnderscoreyear of this BuildOptions.  # noqa: E501


        :return: The minUnderscoreyear of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._minUnderscoreyear

    @minUnderscoreyear.setter
    def minUnderscoreyear(self, minUnderscoreyear):
        """Sets the minUnderscoreyear of this BuildOptions.


        :param minUnderscoreyear: The minUnderscoreyear of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._minUnderscoreyear = minUnderscoreyear

    @property
    def sortUnderscoreby(self):
        """Gets the sortUnderscoreby of this BuildOptions.  # noqa: E501


        :return: The sortUnderscoreby of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._sortUnderscoreby

    @sortUnderscoreby.setter
    def sortUnderscoreby(self, sortUnderscoreby):
        """Sets the sortUnderscoreby of this BuildOptions.


        :param sortUnderscoreby: The sortUnderscoreby of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._sortUnderscoreby = sortUnderscoreby

    @property
    def theme(self):
        """Gets the theme of this BuildOptions.  # noqa: E501


        :return: The theme of this BuildOptions.  # noqa: E501
        :rtype: Integer
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this BuildOptions.


        :param theme: The theme of this BuildOptions.  # noqa: E501
        :type: Integer
        """

        self._theme = theme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
