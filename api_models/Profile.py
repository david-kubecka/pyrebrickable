# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatarUnderscoreimg': 'String',
        'email': 'String',
        'lastUnderscoreactivity': 'Date',
        'lastUnderscoreip': 'String',
        'lego': 'Lego',
        'location': 'String',
        'realUnderscorename': 'String',
        'rewards': 'Rewards',
        'userUnderscoreid': 'Integer',
        'username': 'String'
    }

    attribute_map = {
        'avatarUnderscoreimg': 'avatar_img',
        'email': 'email',
        'lastUnderscoreactivity': 'last_activity',
        'lastUnderscoreip': 'last_ip',
        'lego': 'lego',
        'location': 'location',
        'realUnderscorename': 'real_name',
        'rewards': 'rewards',
        'userUnderscoreid': 'user_id',
        'username': 'username'
    }

    def __init__(self, avatarUnderscoreimg=null, email=null, lastUnderscoreactivity=null, lastUnderscoreip=null, lego=null, location=null, realUnderscorename=null, rewards=null, userUnderscoreid=null, username=null):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501

        self._avatarUnderscoreimg = None
        self._email = None
        self._lastUnderscoreactivity = None
        self._lastUnderscoreip = None
        self._lego = None
        self._location = None
        self._realUnderscorename = None
        self._rewards = None
        self._userUnderscoreid = None
        self._username = None
        self.discriminator = None

        if avatarUnderscoreimg is not None:
            self.avatarUnderscoreimg = avatarUnderscoreimg
        if email is not None:
            self.email = email
        if lastUnderscoreactivity is not None:
            self.lastUnderscoreactivity = lastUnderscoreactivity
        if lastUnderscoreip is not None:
            self.lastUnderscoreip = lastUnderscoreip
        if lego is not None:
            self.lego = lego
        if location is not None:
            self.location = location
        if realUnderscorename is not None:
            self.realUnderscorename = realUnderscorename
        if rewards is not None:
            self.rewards = rewards
        if userUnderscoreid is not None:
            self.userUnderscoreid = userUnderscoreid
        if username is not None:
            self.username = username

    @property
    def avatarUnderscoreimg(self):
        """Gets the avatarUnderscoreimg of this Profile.  # noqa: E501


        :return: The avatarUnderscoreimg of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._avatarUnderscoreimg

    @avatarUnderscoreimg.setter
    def avatarUnderscoreimg(self, avatarUnderscoreimg):
        """Sets the avatarUnderscoreimg of this Profile.


        :param avatarUnderscoreimg: The avatarUnderscoreimg of this Profile.  # noqa: E501
        :type: String
        """

        self._avatarUnderscoreimg = avatarUnderscoreimg

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: String
        """

        self._email = email

    @property
    def lastUnderscoreactivity(self):
        """Gets the lastUnderscoreactivity of this Profile.  # noqa: E501


        :return: The lastUnderscoreactivity of this Profile.  # noqa: E501
        :rtype: Date
        """
        return self._lastUnderscoreactivity

    @lastUnderscoreactivity.setter
    def lastUnderscoreactivity(self, lastUnderscoreactivity):
        """Sets the lastUnderscoreactivity of this Profile.


        :param lastUnderscoreactivity: The lastUnderscoreactivity of this Profile.  # noqa: E501
        :type: Date
        """

        self._lastUnderscoreactivity = lastUnderscoreactivity

    @property
    def lastUnderscoreip(self):
        """Gets the lastUnderscoreip of this Profile.  # noqa: E501


        :return: The lastUnderscoreip of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._lastUnderscoreip

    @lastUnderscoreip.setter
    def lastUnderscoreip(self, lastUnderscoreip):
        """Sets the lastUnderscoreip of this Profile.


        :param lastUnderscoreip: The lastUnderscoreip of this Profile.  # noqa: E501
        :type: String
        """

        self._lastUnderscoreip = lastUnderscoreip

    @property
    def lego(self):
        """Gets the lego of this Profile.  # noqa: E501


        :return: The lego of this Profile.  # noqa: E501
        :rtype: Lego
        """
        return self._lego

    @lego.setter
    def lego(self, lego):
        """Sets the lego of this Profile.


        :param lego: The lego of this Profile.  # noqa: E501
        :type: Lego
        """

        self._lego = lego

    @property
    def location(self):
        """Gets the location of this Profile.  # noqa: E501


        :return: The location of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Profile.


        :param location: The location of this Profile.  # noqa: E501
        :type: String
        """

        self._location = location

    @property
    def realUnderscorename(self):
        """Gets the realUnderscorename of this Profile.  # noqa: E501


        :return: The realUnderscorename of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._realUnderscorename

    @realUnderscorename.setter
    def realUnderscorename(self, realUnderscorename):
        """Sets the realUnderscorename of this Profile.


        :param realUnderscorename: The realUnderscorename of this Profile.  # noqa: E501
        :type: String
        """

        self._realUnderscorename = realUnderscorename

    @property
    def rewards(self):
        """Gets the rewards of this Profile.  # noqa: E501


        :return: The rewards of this Profile.  # noqa: E501
        :rtype: Rewards
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this Profile.


        :param rewards: The rewards of this Profile.  # noqa: E501
        :type: Rewards
        """

        self._rewards = rewards

    @property
    def userUnderscoreid(self):
        """Gets the userUnderscoreid of this Profile.  # noqa: E501


        :return: The userUnderscoreid of this Profile.  # noqa: E501
        :rtype: Integer
        """
        return self._userUnderscoreid

    @userUnderscoreid.setter
    def userUnderscoreid(self, userUnderscoreid):
        """Sets the userUnderscoreid of this Profile.


        :param userUnderscoreid: The userUnderscoreid of this Profile.  # noqa: E501
        :type: Integer
        """

        self._userUnderscoreid = userUnderscoreid

    @property
    def username(self):
        """Gets the username of this Profile.  # noqa: E501


        :return: The username of this Profile.  # noqa: E501
        :rtype: String
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Profile.


        :param username: The username of this Profile.  # noqa: E501
        :type: String
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
