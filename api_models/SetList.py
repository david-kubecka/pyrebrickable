# coding: utf-8

import pprint
import re  # noqa: F401

import six


class SetList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'Integer',
        'isUnderscorebuildable': 'Boolean',
        'name': 'String',
        'numUnderscoresets': 'Integer'
    }

    attribute_map = {
        'id': 'id',
        'isUnderscorebuildable': 'is_buildable',
        'name': 'name',
        'numUnderscoresets': 'num_sets'
    }

    def __init__(self, id=null, isUnderscorebuildable=null, name=null, numUnderscoresets=null):  # noqa: E501
        """SetList - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._isUnderscorebuildable = None
        self._name = None
        self._numUnderscoresets = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if isUnderscorebuildable is not None:
            self.isUnderscorebuildable = isUnderscorebuildable
        if name is not None:
            self.name = name
        if numUnderscoresets is not None:
            self.numUnderscoresets = numUnderscoresets

    @property
    def id(self):
        """Gets the id of this SetList.  # noqa: E501


        :return: The id of this SetList.  # noqa: E501
        :rtype: Integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SetList.


        :param id: The id of this SetList.  # noqa: E501
        :type: Integer
        """

        self._id = id

    @property
    def isUnderscorebuildable(self):
        """Gets the isUnderscorebuildable of this SetList.  # noqa: E501


        :return: The isUnderscorebuildable of this SetList.  # noqa: E501
        :rtype: Boolean
        """
        return self._isUnderscorebuildable

    @isUnderscorebuildable.setter
    def isUnderscorebuildable(self, isUnderscorebuildable):
        """Sets the isUnderscorebuildable of this SetList.


        :param isUnderscorebuildable: The isUnderscorebuildable of this SetList.  # noqa: E501
        :type: Boolean
        """

        self._isUnderscorebuildable = isUnderscorebuildable

    @property
    def name(self):
        """Gets the name of this SetList.  # noqa: E501


        :return: The name of this SetList.  # noqa: E501
        :rtype: String
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SetList.


        :param name: The name of this SetList.  # noqa: E501
        :type: String
        """

        self._name = name

    @property
    def numUnderscoresets(self):
        """Gets the numUnderscoresets of this SetList.  # noqa: E501


        :return: The numUnderscoresets of this SetList.  # noqa: E501
        :rtype: Integer
        """
        return self._numUnderscoresets

    @numUnderscoresets.setter
    def numUnderscoresets(self, numUnderscoresets):
        """Sets the numUnderscoresets of this SetList.


        :param numUnderscoresets: The numUnderscoresets of this SetList.  # noqa: E501
        :type: Integer
        """

        self._numUnderscoresets = numUnderscoresets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
