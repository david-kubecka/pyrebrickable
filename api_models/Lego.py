# coding: utf-8

import pprint
import re  # noqa: F401

import six


class Lego(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allUnderscoreparts': 'Integer',
        'lostUnderscoresetUnderscoreparts': 'Integer',
        'totalUnderscorelooseUnderscoreparts': 'Integer',
        'totalUnderscoresetUnderscoreparts': 'Integer',
        'totalUnderscoresets': 'Integer'
    }

    attribute_map = {
        'allUnderscoreparts': 'all_parts',
        'lostUnderscoresetUnderscoreparts': 'lost_set_parts',
        'totalUnderscorelooseUnderscoreparts': 'total_loose_parts',
        'totalUnderscoresetUnderscoreparts': 'total_set_parts',
        'totalUnderscoresets': 'total_sets'
    }

    def __init__(self, allUnderscoreparts=null, lostUnderscoresetUnderscoreparts=null, totalUnderscorelooseUnderscoreparts=null, totalUnderscoresetUnderscoreparts=null, totalUnderscoresets=null):  # noqa: E501
        """Lego - a model defined in OpenAPI"""  # noqa: E501

        self._allUnderscoreparts = None
        self._lostUnderscoresetUnderscoreparts = None
        self._totalUnderscorelooseUnderscoreparts = None
        self._totalUnderscoresetUnderscoreparts = None
        self._totalUnderscoresets = None
        self.discriminator = None

        if allUnderscoreparts is not None:
            self.allUnderscoreparts = allUnderscoreparts
        if lostUnderscoresetUnderscoreparts is not None:
            self.lostUnderscoresetUnderscoreparts = lostUnderscoresetUnderscoreparts
        if totalUnderscorelooseUnderscoreparts is not None:
            self.totalUnderscorelooseUnderscoreparts = totalUnderscorelooseUnderscoreparts
        if totalUnderscoresetUnderscoreparts is not None:
            self.totalUnderscoresetUnderscoreparts = totalUnderscoresetUnderscoreparts
        if totalUnderscoresets is not None:
            self.totalUnderscoresets = totalUnderscoresets

    @property
    def allUnderscoreparts(self):
        """Gets the allUnderscoreparts of this Lego.  # noqa: E501


        :return: The allUnderscoreparts of this Lego.  # noqa: E501
        :rtype: Integer
        """
        return self._allUnderscoreparts

    @allUnderscoreparts.setter
    def allUnderscoreparts(self, allUnderscoreparts):
        """Sets the allUnderscoreparts of this Lego.


        :param allUnderscoreparts: The allUnderscoreparts of this Lego.  # noqa: E501
        :type: Integer
        """

        self._allUnderscoreparts = allUnderscoreparts

    @property
    def lostUnderscoresetUnderscoreparts(self):
        """Gets the lostUnderscoresetUnderscoreparts of this Lego.  # noqa: E501


        :return: The lostUnderscoresetUnderscoreparts of this Lego.  # noqa: E501
        :rtype: Integer
        """
        return self._lostUnderscoresetUnderscoreparts

    @lostUnderscoresetUnderscoreparts.setter
    def lostUnderscoresetUnderscoreparts(self, lostUnderscoresetUnderscoreparts):
        """Sets the lostUnderscoresetUnderscoreparts of this Lego.


        :param lostUnderscoresetUnderscoreparts: The lostUnderscoresetUnderscoreparts of this Lego.  # noqa: E501
        :type: Integer
        """

        self._lostUnderscoresetUnderscoreparts = lostUnderscoresetUnderscoreparts

    @property
    def totalUnderscorelooseUnderscoreparts(self):
        """Gets the totalUnderscorelooseUnderscoreparts of this Lego.  # noqa: E501


        :return: The totalUnderscorelooseUnderscoreparts of this Lego.  # noqa: E501
        :rtype: Integer
        """
        return self._totalUnderscorelooseUnderscoreparts

    @totalUnderscorelooseUnderscoreparts.setter
    def totalUnderscorelooseUnderscoreparts(self, totalUnderscorelooseUnderscoreparts):
        """Sets the totalUnderscorelooseUnderscoreparts of this Lego.


        :param totalUnderscorelooseUnderscoreparts: The totalUnderscorelooseUnderscoreparts of this Lego.  # noqa: E501
        :type: Integer
        """

        self._totalUnderscorelooseUnderscoreparts = totalUnderscorelooseUnderscoreparts

    @property
    def totalUnderscoresetUnderscoreparts(self):
        """Gets the totalUnderscoresetUnderscoreparts of this Lego.  # noqa: E501


        :return: The totalUnderscoresetUnderscoreparts of this Lego.  # noqa: E501
        :rtype: Integer
        """
        return self._totalUnderscoresetUnderscoreparts

    @totalUnderscoresetUnderscoreparts.setter
    def totalUnderscoresetUnderscoreparts(self, totalUnderscoresetUnderscoreparts):
        """Sets the totalUnderscoresetUnderscoreparts of this Lego.


        :param totalUnderscoresetUnderscoreparts: The totalUnderscoresetUnderscoreparts of this Lego.  # noqa: E501
        :type: Integer
        """

        self._totalUnderscoresetUnderscoreparts = totalUnderscoresetUnderscoreparts

    @property
    def totalUnderscoresets(self):
        """Gets the totalUnderscoresets of this Lego.  # noqa: E501


        :return: The totalUnderscoresets of this Lego.  # noqa: E501
        :rtype: Integer
        """
        return self._totalUnderscoresets

    @totalUnderscoresets.setter
    def totalUnderscoresets(self, totalUnderscoresets):
        """Sets the totalUnderscoresets of this Lego.


        :param totalUnderscoresets: The totalUnderscoresets of this Lego.  # noqa: E501
        :type: Integer
        """

        self._totalUnderscoresets = totalUnderscoresets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lego):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
